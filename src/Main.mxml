<?xml version="1.0" encoding="utf-8"?>
<!--Copyright (c) 2010 Curtis Cooper

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.-->
<mx:Application xmlns:mx="http://www.adobe.com/2006/mxml"
	xmlns:containers="containers.*"
	xmlns:ape="util.*"
	applicationComplete="onCC()"
	initialize="init()"
	layout="absolute" >
	<mx:Script>
		<![CDATA[
			import flash.net.navigateToURL;
			import flash.net.registerClassAlias;
			import mx.containers.Canvas;
			import mx.events.CloseEvent;
			import mx.events.MenuEvent;
			import events.LogEvent;
			import events.SelectionEvent;
			import mx.controls.Alert;
			import physics.SolarSystem;
			import org.cove.ape.StellarObject;
			import mx.core.UIComponent;
			import org.cove.ape.SelectableParticle;
			import physics.SolarSystemProperties;
			import org.cove.ape.Vector;
			import mx.collections.ArrayCollection;
			
			import nl.demonsters.debugger.MonsterDebugger;
			
			private var _debugger:MonsterDebugger;
			
			[Bindable]
			private var viewParameters:ViewParameters = ViewParameters.getInstance();
			
			[Bindable]
			public var _solarSystem:SolarSystem;
			
			private var _panning:Boolean;
			private var _startPoint:Point;
			private var _lastOrigin:Point;
			
			[Bindable] public var consoleText:String = "";
			[Bindable] public var _selectedObject:StellarObject;
			[Bindable] public var SHOW_START:Boolean = false;
			[Bindable] public var SHOW_ACK:Boolean = false;
			[Bindable] public var SHOW_HELP:Boolean = false;
			
			public static const FR:String = "FR";
			public static const SR:String = "SR";
			public static const PA:String = "PA";
			public static const PL:String = "PL";
			public static const SF:String = "SF";
			public static const FF:String = "FF";
			
			public static var timeControlValue:String = PL;		
			
			[Bindable] private var objectCount:Number = 1;	
			[Bindable] private var saveSO:SharedObject;
			
			[Bindable]
			private var menubarXML:XMLList =
                <>
                    <menuitem label="File" data="top">
                        <menuitem label="Restart" data="RESTART"/>
                    </menuitem>
                    <menuitem label="Controls" data="top">
			           <menuitem label="Toggle Panning (press M)" data="PAN"/>
			           <menuitem label="Toggle Paths (press P)" data="PATH"/>
			           <menuitem label="Toggle Grid (press G)" data="GRID"/>
                    </menuitem>
                    <menuitem label="Help" data="top">
                    	<menuitem label="Show Help" data="HELP"/>
                        <menuitem label="About..." data="ABOUT"/>
                    </menuitem>
                </>;
			
			private function init():void {
				_debugger = new MonsterDebugger(this);
				MonsterDebugger.trace(this, "say what?");
				
				//registerClassAlias("StellarObjectAlias", StellarObject);
				
				//find shared objects
				/* saveSO = SharedObject.getLocal("saves");
			    if (saveSO.size == 0)
			    	saveSO.data.saves = []; */
				
				_solarSystem = new SolarSystem();
				_solarSystem.addEventListener(SelectionEvent.SELECTION, onSelection);
				
				var canvas:Canvas;
				var uiComponent:UIComponent = new UIComponent();
				uiComponent.addChild(_solarSystem);
			
				//Sets up a 1000x1000 square as the work space
				//0,0 is in the center of the component
				//x goes from left to right, y goes from top to bottom
				_solarSystem.x = viewParameters.canvasWidth / 2;
				_solarSystem.y = viewParameters.canvasHeight / 2;
				uiComponent.width = viewParameters.canvasWidth;
				uiComponent.height = viewParameters.canvasHeight;
				mainCanvas.addChild(uiComponent);
				
			}
			
			private function onCC():void {
				stage.addEventListener(KeyboardEvent.KEY_DOWN, handleKeyDown);
				stage.addEventListener(LogEvent.CONSOLE_EVENT, onConsoleEvent);
				
				/*
				Alert.show("Welcome to UniverseModeler.", "", Alert.OK, this,
					function(event:CloseEvent):void {
						setFocus();
						startApe();
					}
				);
				*/
				
				SHOW_START = true;
				startApe();
				lstAddBodies.dataProvider = new ArrayCollection();
				consoleText += "Component initialization complete.\n";
			}
			
			private function updateListDataProvider():void {
				lstBodies.dataProvider = _solarSystem.bodies;
			}
			
			private function onConsoleEvent($event:DataEvent):void {
				consoleText = $event.data + '\n' + consoleText;
			}
			
			private function onSelection($event:SelectionEvent):void {
				_selectedObject = $event.selectedItem as StellarObject;
			}
			
			private function handleKeyDown($event:KeyboardEvent):void {
				switch($event.keyCode) {
					case 71:
						_solarSystem.showAxes = !_solarSystem.showAxes;
						break;
					case 77:
						enablePanning(!mainCanvas.enablePanning);
						break;
					case 80:
						enablePaths(!_solarSystem.showPaths);
						break;
					case 37:
					case 38:
					case 39:
					case 40:
						_solarSystem.moveSelectedBody($event.keyCode);
						break;
				}
					
			}
			
			private function enablePanning($value:Boolean):void {
				mainCanvas.enablePanning = $value;
			}
			
			private function enablePaths($value:Boolean):void {
				_solarSystem.showPaths = $value;
				_solarSystem.clearPaths();
			}
			
			private function onMenuItemClick($event:MenuEvent):void {
				switch($event.label) {
					case "Restart":
						_solarSystem.clear();
						_solarSystem.clearPaths();
						lstAddBodies.cloneAll();
						//lstAddBodies.dataProvider = new ArrayCollection();
						//lstAddBodies.removeAll();
						SHOW_START = true;
						break;
					case "Toggle Panning (press M)":
						enablePanning(!mainCanvas.enablePanning);
						break;
					case "Toggle Paths (press P)":
						enablePaths(!_solarSystem.showPaths);
						break;
					case "Toggle Grid (press G)":
						_solarSystem.showAxes = !_solarSystem.showAxes;
						break;
					case "About...":
						SHOW_ACK = true;;
						break;
					case "Show Help":
						SHOW_HELP = true;;
						break;
				}
			}
			
			private function useDefault():void {
				
				var star:StellarObject = new StellarObject(0,0,20,false,SolarSystemProperties.SUN_MASS,0,0);
				star.name = "Sol";
				var p1:StellarObject = new StellarObject(
					SolarSystemProperties.DIST_EARTH_SUN * viewParameters.distanceRatio,
					0,5,
					false,
					SolarSystemProperties.EARTH_MASS,
					0,0);
				p1.name = "Earth";
				
				p1.velocity = new Vector(0, -(SolarSystemProperties.EARTH_VELOCITY * viewParameters.velocityRatio));
			
				
				lstAddBodies.useSetValues([star, p1]);
				//btnSave.visible = true;
				btnLaunch.visible = true;
				btnClear.visible = true;
			}
			
			private function useCustom():void {
				_solarSystem.clear();
				setFocus();
				
				lstAddBodies.updateObjects();
				_solarSystem.addBodies(lstAddBodies.dataProvider.source,true);
				updateListDataProvider();
				
				timeControlValue = PL;
				
				SHOW_START = false;
			}
			
			private function startApe():void {
				_solarSystem.letsGo();
				_solarSystem.drawGrid();
				
			}
			
			private function addNewObject():void {
				var newBody:StellarObject = new StellarObject(0,0,5,false,SolarSystemProperties.SUN_MASS);
				newBody.name = "Default_" + String(objectCount++);
				newBody.color = 0xFFFFFF;
				(lstAddBodies.dataProvider as ArrayCollection).addItem(newBody);
			}
			
			/* private function save():void {
				(saveSO.data.saves as Array).push((lstAddBodies.dataProvider as ArrayCollection).source);
				saveSO.flush();
			}
			
			private function onLoad():void {
				lstAddBodies.useSetValues(cboLoad.selectedItem as Array);
				btnSave.visible = true;
				btnLaunch.visible = true;
				btnClear.visible = true;
			} */
			
		]]>
	</mx:Script>
	<mx:Style source="/assets/style.css"/>
	<mx:MenuBar width="100%" height="25" 
		itemClick="onMenuItemClick(event)" 
		dataProvider="{menubarXML}" labelField="@label"/>
	<mx:HDividedBox width="100%" top="25" bottom="0" visible="{!SHOW_START}">
		<!-- The Bodies list component -->
		<mx:List id="lstBodies" top="25" left="0" width="144" height="100%"
			variableRowHeight="true" selectable="false">
			<mx:itemRenderer>
				<mx:Component>
					<containers:BodiesListRenderer />
				</mx:Component>
			</mx:itemRenderer>
		</mx:List>
		<containers:PanScrollingCanvas id="mainCanvas" 
			height="100%" width="100%"
			borderColor="0x333333" borderStyle="solid" borderThickness="2"/>
	</mx:HDividedBox>
	<mx:VBox id="consoleBox" top="25" right="0" width="50%" height="21%" visible="false"
		borderThickness="1" backgroundAlpha="1"
		borderColor="0x888888" borderStyle="solid" 
		borderSides="left | bottom" verticalGap="0">
		<mx:HBox width="100%" backgroundColor="black" verticalAlign="middle">
			<mx:Text id="txtConsoleTitle" selectable="false" text="Console" fontWeight="bold"/>
			<mx:Spacer width="100%"/>
			<mx:Text selectable="false" text="[x]" useHandCursor="true" buttonMode="true" mouseChildren="false"
				click="consoleBox.visible = false"/>
		</mx:HBox>
		<mx:HRule width="100%"/>
		<mx:TextArea id="txtConsoleMain" height="100%" width="100%"
			text="{consoleText}" backgroundColor="black"/>
	</mx:VBox>
	
	<mx:DateFormatter id="dateFormatter" formatString="MMMM DD, YYYY - LL A"/>	
	<mx:Text id="txtDate" selectable="false" text="{dateFormatter.format(viewParameters.getCurrentDate(viewParameters.timeFrame))}"
		bottom="20" horizontalCenter="0" color="0xFFFFFF" visible="{!SHOW_START}"/>
		
	<!-- Time controls -->	
	<mx:HBox verticalAlign="center" bottom="5" horizontalCenter="0" visible="{!SHOW_START}">
		<mx:Text text="&lt;&lt;" toolTip="Fast Reverse" click="timeControlValue = FR"
			useHandCursor="true" buttonMode="true" mouseChildren="false" selectable="false"/>
		<mx:Text text="&lt;|" toolTip="Step Back" click="timeControlValue = SR"
			useHandCursor="true" buttonMode="true" mouseChildren="false" selectable="false"/>
		<mx:Text text="||" toolTip="Pause" click="timeControlValue = PA"
			enabled="{_solarSystem.testFrameControl != 0}" disabledColor="0x553333"
			useHandCursor="{_solarSystem.testFrameControl != 0}" buttonMode="true" mouseChildren="false" selectable="false"/>
		<mx:Text text="&gt;" toolTip="Play" click="timeControlValue = PL"
			enabled="{_solarSystem.testFrameControl != 5}" disabledColor="0x553333"
			useHandCursor="{_solarSystem.testFrameControl != 5}" buttonMode="true" mouseChildren="false" selectable="false"/>
		<mx:Text text="|&gt;" toolTip="Step Forward" click="timeControlValue = SF"
			enabled="{_solarSystem.testFrameControl &gt; 5}" disabledColor="0x553333"
			useHandCursor="{_solarSystem.testFrameControl &gt; 5}" buttonMode="true" mouseChildren="false" selectable="false"/>
		<mx:Text text="&gt;&gt;" toolTip="Fast Forward" click="timeControlValue = FF"
			enabled="{_solarSystem.testFrameControl &gt; 25}" disabledColor="0x553333"
			useHandCursor="{_solarSystem.testFrameControl &gt; 25}" buttonMode="true" mouseChildren="false" selectable="false"/>
	</mx:HBox>
	
	<mx:Text selectable="false" text="200 pixels = 1 AU" bottom="5" right="5" visible="{!SHOW_START}"/>
	
	<mx:TitleWindow id="titleWindowStart" width="610" height="377"
		borderAlpha="1"
		verticalCenter="0" horizontalCenter="0"
		visible="{SHOW_START}" includeInLayout="{SHOW_START}"
		title="Welcome to Universe Modeler">
		<mx:VBox width="100%" height="100%" horizontalAlign="center">
			<mx:HBox width="100%" verticalAlign="middle">
				<mx:CheckBox id="chkShowPath" label="Show Paths" selected="{_solarSystem.showPaths}" change="enablePaths(chkShowPath.selected)"/>
				<mx:CheckBox id="chkShowGrid" label="Show Grid" selected="{_solarSystem.showAxes}" change="_solarSystem.showAxes = !_solarSystem.showAxes"/>
				<mx:CheckBox id="chkShowPanning" label="Enable Panning" selected="{mainCanvas.enablePanning}" change="enablePanning(chkShowPanning.selected)"/>
				<mx:Spacer width="100%"/>
			</mx:HBox>
			<mx:Text width="100%" selectable="false" text="{'Press Use Default to start with a two body system that mimics Earth and Sol.\nPress Add Body to add custom bodies to the view.\nNote that the positive X direction is right, while the positive Y direction is down (Y is inverted).'}"/>
			<mx:HBox width="100%" horizontalAlign="center">
				<mx:Text text="Use Default" selectable="false" useHandCursor="true" buttonMode="true" mouseChildren="false"
					fontSize="12" textDecoration="underline"
					click="useDefault()"/>
				<mx:Text text="Add Body" selectable="false" useHandCursor="true" buttonMode="true" mouseChildren="false" 
					fontSize="12" textDecoration="underline"
					click="addNewObject()"/>
				<!--<mx:Spacer width="100%"/>
				<mx:Text selectable="false" text="Add From Save:"/>
				<mx:ComboBox id="cboLoad" dataProvider="{saveSO.data.saves}" change="onLoad()" prompt="Select..."/>-->
			</mx:HBox>
			<mx:HRule width="100%"/>
			<containers:TabList id="lstAddBodies" width="100%" height="181"/>
		</mx:VBox>
		<mx:ControlBar>
			<!--<mx:Text id="btnSave" text="Save" selectable="false" useHandCursor="true" buttonMode="true" mouseChildren="false"
					fontSize="12" textDecoration="underline" visible="{lstAddBodies.dataProvider.length &gt; 0}"
					click="save()"/>-->
			<mx:Spacer width="100%"/>
			<mx:Text id="btnLaunch" text="Launch" selectable="false" useHandCursor="true" buttonMode="true" mouseChildren="false"
					fontSize="12" textDecoration="underline" visible="{lstAddBodies.dataProvider.length &gt; 0}"
					click="useCustom()"/>
			<mx:Text id="btnClear" text="Clear All" selectable="false" useHandCursor="true" buttonMode="true" mouseChildren="false"
					fontSize="12" textDecoration="underline" visible="{lstAddBodies.dataProvider.length &gt; 0}"
					click="lstAddBodies.dataProvider = new ArrayCollection();lstAddBodies.removeAll()"/>
		</mx:ControlBar>
	</mx:TitleWindow>
	
	<mx:TitleWindow id="titleWindowAbout" width="610" height="377"
		borderAlpha="1" showCloseButton="true" close="SHOW_ACK = false"
		verticalCenter="0" horizontalCenter="0"
		visible="{SHOW_ACK}" includeInLayout="{SHOW_ACK}"
		title="About Universe Modeler" verticalGap="0">
			<mx:Text selectable="false" width="100%" text="{'Special thanks to:'}"/>
			<mx:HBox>
				<mx:Text selectable="false" width="100%" text="{'Alec Cove for the ActionScript Physics Engine (APE)'}"/>
				<mx:Text selectable="false" buttonMode="true" mouseChildren="false" useHandCursor="true" textDecoration="underline" 
					text="http://www.cove.org/portfolio/opensource.htm" click="navigateToURL(new URLRequest('http://www.cove.org/portfolio/opensource.htm'))"/>
			</mx:HBox>
			<mx:HBox>
				<mx:Text selectable="false" width="100%" text="{'mb0 (real name unknown) for AXDT'}"/>
				<mx:Text selectable="false" buttonMode="true" mouseChildren="false" useHandCursor="true" textDecoration="underline" 
					text="http://www.axdt.org" click="navigateToURL(new URLRequest('http://www.axdt.org'))"/>
			</mx:HBox>
			<mx:HBox>
				<mx:Text selectable="false" width="100%" text="{'De Monsters for De MonsterDebugger'}"/>
				<mx:Text selectable="false" buttonMode="true" mouseChildren="false" useHandCursor="true" textDecoration="underline" 
					text="http://www.demonsterdebugger.com" click="navigateToURL(new URLRequest('http://www.demonsterdebugger.com'))"/>
			</mx:HBox>
			<mx:HBox>
				<mx:Text selectable="false" width="100%" text="{'Didier Burton for PanScrollingCanvas'}"/>
				<mx:Text selectable="false" buttonMode="true" mouseChildren="false" useHandCursor="true" textDecoration="underline" 
					text="http://blog.didierburton.net" click="navigateToURL(new URLRequest('http://blog.didierburton.net'))"/>
			</mx:HBox>
			<mx:HBox>
				<mx:Text selectable="false" width="100%" text="{'Robert Penner for exponent notation functions'}"/>
				<mx:Text selectable="false" buttonMode="true" mouseChildren="false" useHandCursor="true" textDecoration="underline" 
					text="http://robertpenner.com/" click="navigateToURL(new URLRequest('http://robertpenner.com/'))"/>
			</mx:HBox>
			<mx:Spacer height="10"/>
			<mx:HBox>
				<mx:Text selectable="false" width="100%" text="{'Source code is available via subversion'}"/>
				<mx:Text selectable="false" buttonMode="true" mouseChildren="false" useHandCursor="true" textDecoration="underline" 
					text="http://universe-modeler.googlecode.com/svn/" click="navigateToURL(new URLRequest('http://universe-modeler.googlecode.com/svn/'))"/>
			</mx:HBox>
			<mx:Text selectable="false" width="100%" text="{'Copyright (c) 2010 Curtis Cooper
\n\n
Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the &quot;Software&quot;), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:
\n\n
The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.
\n\n
THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.'}"/>
		<mx:ControlBar horizontalAlign="center">
			<mx:Button label="Close" click="SHOW_ACK = false"/>
		</mx:ControlBar>
	</mx:TitleWindow>
	
	<mx:TitleWindow id="titleWindowHelp" width="610" height="377"
		borderAlpha="1" showCloseButton="true" close="SHOW_HELP = false"
		verticalCenter="0" horizontalCenter="0"
		visible="{SHOW_HELP}" includeInLayout="{SHOW_HELP}"
		title="Help">
			<mx:Text selectable="false" width="100%" text="{'' + 
					'My hope is that this application is designed in such a way that the majority of functionality, and how it can be used, is immediately apparent to the user. ' + 
					'However, there are some elements which I imagine will not be immediately obvious so I will elaborate on these areas.\n\n' + 
					'Adding Bodies:\n' + 
					'The purpose of the application is to show how bodies react under the influence of the law of universal gravitation. ' + 
					'All bodies that are added to the application influence each other, there is no way to add a body that is immune to ' + 
					'the forces of other bodies or which does not affect other bodies. All bodies are added at the Welcome/Add Bodies dialog by clicking ' + 
					'&quot;Add Body&quot;. A new body will be added to the list below and it\'s properties can be customized by changing the form values. Proceeding in this fashion ' + 
					'multiple body systems can be modeled. To begin the simulation click &quot;Launch&quot;.\n\n' + 
					'Selecting and Moving Bodies:\n' + 
					'Once a simulation is in motion the bodies that have been added can be moved in space. To do this bodies must first be selected, only ' + 
					'selected bodies will respond to keyboard input. To select a body either click on it in the view pane (hold Ctrl and click for multiple ' + 
					'selection) or double click the body\'s name in the left hand details panel. To move bodies, hold the arrow keys in the direction ' + 
					'you would like them to move.\n\n' + 
					'Time Controls:\n' + 
					'There are controls at the bottom of the screen which control the passage of time for the simulation. The simulation begins at the ' + 
					'fastest simulation speed and can at any time be returned to this speed by pressing the &quot;Play&quot; button. To slow the simulation ' + 
					'press either the &quot;Step Back&quot; or &quot;Fast Reverse&quot; button, and to increase the speed press either the &quot;Step Forward&quot; or &quot;Fast Forward&quot; button.\n\n' + 
					'View Controls:\n' + 
					'There are three hotkeys that can be used to toggle the three view controls (Panning, Paths and Grid). These hotkeys are M - Panning, P - Paths and G - Grid. Press these keys ' + 
					'while the application is in focus to toggle the related feature. These features can also be controlled by checkboxes in the Welcome/Add Bodies dialog ' + 
					'and from the Controls menu. When Panning is enabled, the viewing area reacts to the user\'s mouse to move the view to different areas. When Paths are ' + 
					'enabled, a path will be drawn showing the past motion of each planet. When Grid is enabled, x and y axes are displayed on the screen (each tick mark ' + 
					'equals 1 AU, the average distance from the Earth to Sol).'}"/>
					
		<mx:ControlBar horizontalAlign="center">
			<mx:Button label="Close" click="SHOW_HELP = false"/>
		</mx:ControlBar>
	</mx:TitleWindow>	
	
</mx:Application>